# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Maven
  
on:
# Events : 
# Everytime someone will pushes the the master brach or pull from the master branch 
# (if we want to merge something to the master branch), this will triggers the workflow
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
#Jobs = combinations of actions 

  build:

    runs-on: ${{matrix.os}}
    strategy: 
     matrix:
      os: [ubuntu-latest, windows-latest, macOS-latest]      

    steps:
    - uses: actions/checkout@v3 # Download a copy of the repository on the runner
    
    #configures the Java 11 JDK for our environment
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' 
        
    #Cache the dependencies to speed up the workflow runs (dependencies won't need to 
    #be downloaded from remote Maven repositories (after a first successful run))
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2 
        
    #Runs the Maven package and ensure hat our code builds, our tests pass and a package can be created
    - name: Build project with Maven
      run: mvn -B package --file pom.xml

#Upload our results, our packages workflow data produced during the workflow run as artifacts 
#Artifacts can help you test and debug pull requests in your local environment before they're merged
#For example, you can use artifacts to save your build and test output after a workflow run has ended
#Wil be upload in the new directory "staging"
  publish-job:
      runs-on: ubuntu-latest
      #Waits for this ojb to be sucessfully executed
      needs: [build]
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-java@v3
          with:
            java-version: '11'
            distribution: 'temurin'
        - run : mvn clean
        - run: mvn -B package --file pom.xml -DskipTests
        - run: mkdir staging && cp target/*.jar staging
        - uses: actions/upload-artifact@v3
          with:
            name: Package
            path: staging
            
            
  build-docker-image:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Container image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .
      - name: Publish Docker image
        run: docker push ${{ secrets.DOCKER_REPO }}
 
